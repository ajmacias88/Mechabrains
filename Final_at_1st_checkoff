
#define USE_TIMER_2 true
#include <TimerInterrupt.h>

#define leftUSTrig A0
#define leftUSEcho 7

#define rightUSTrig A3
#define rightUSEcho 4

#define frontRUSTrig A2
#define frontRUSEcho 5

#define frontLUSTrig A1
#define frontLUSEcho 2

#define backUSTrig A4
#define backUSEcho 3

#define IR A5

#define SLIDE 6

int error = 3;

float durationFR, distanceFR, durationFL, distanceFL, durationR, distanceR, durationL, distanceL, durationB, distanceB;
#define MR_1 13
#define MR_2 12
#define MR_PWM 10

#define ML_1 8
#define ML_2 11
#define ML_PWM 9

int count = 0;
int timer;
int timer2;
int freq1 = 100;
int stateU = LOW;
int type = 0;

volatile byte state;

/*---------------State Definitions--------------------------*/
typedef enum {
  ORIENTING_A,
  FORWARD1,
  LEFT1,
  EXITING1,
  ENTERING2,
  FORWARD2,
  FORWARD_HIT,
  LEFT2,
  BACKUP,
  FORWARD_HIT2,
  BACKUP2,
  FORWARD_HIT3,
  CELEB,
  STOP
} States_t;

void TimerHandler1() {
  if (count == 0) {
    stateU = HIGH;
    digitalWrite(frontRUSTrig, stateU);
    digitalWrite(frontLUSTrig, stateU);
    digitalWrite(rightUSTrig, stateU);
    digitalWrite(leftUSTrig, stateU);
    digitalWrite(backUSTrig, stateU);
  } else {
    stateU = LOW;
    digitalWrite(frontRUSTrig, stateU);
    digitalWrite(frontLUSTrig, stateU);
    digitalWrite(rightUSTrig, stateU);
    digitalWrite(leftUSTrig, stateU);
    digitalWrite(backUSTrig, stateU);
  }
  count++;
  if (count == 2) {
    if (type == 1) {
      durationFR = pulseIn(frontRUSEcho, HIGH);
      distanceFR = (durationFR * .0343) / 2;
      
    } else if (type == 2) {
      durationFL = pulseIn(frontLUSEcho, HIGH);
      distanceFL = (durationFL * .0343) / 2;

    }  else if (type == 3) {
      durationL = pulseIn(leftUSEcho, HIGH);
      distanceL = (durationL * .0343) / 2;

    } else if (type == 4) {
      durationR = pulseIn(rightUSEcho, HIGH);
      distanceR = (durationR * .0343) / 2;

    }
     else if (type == 5) {
      durationB = pulseIn(backUSEcho, HIGH);
      distanceB = (durationB * .0343) / 2;
      type = 0;
    }
    type++;

    count = 0;
  }
}

void setup() {
  // put your setup code here, to run once
  pinMode(MR_1, OUTPUT);
  pinMode(MR_2, OUTPUT);
  pinMode(ML_PWM, OUTPUT);
  pinMode(ML_1, OUTPUT);
  pinMode(ML_2, OUTPUT);
  pinMode(MR_PWM, OUTPUT);

  pinMode(leftUSTrig, OUTPUT);
  pinMode(leftUSEcho, INPUT);

  pinMode(rightUSTrig, OUTPUT);
  pinMode(rightUSEcho, INPUT);

  pinMode(frontRUSTrig, OUTPUT);
  pinMode(frontRUSEcho, INPUT);

  pinMode(frontLUSTrig, OUTPUT);
  pinMode(frontLUSEcho, INPUT);

  pinMode(backUSTrig, OUTPUT);
  pinMode(backUSEcho, INPUT);

  analogWrite(MR_PWM, 0);
  analogWrite(ML_PWM, 0);
  digitalWrite(MR_1, 0);
  digitalWrite(MR_2, 1);
  digitalWrite(ML_1, 0);
  digitalWrite(ML_2, 1);


  Serial.begin(9600);
  stateU = LOW;
  state = ORIENTING_A;

  ITimer2.init();
  ITimer2.setFrequency(freq1, TimerHandler1);

  //myservo.attach(6);
}

void forward() {
  if ((abs(distanceFR - distanceFL) <= error) && (distanceFR!= 0) && (distanceFL != 0)) {
    Sforward();
  }
  if ((distanceFR - distanceFL > error) && (distanceFR!= 0) && (distanceFL != 0)) {
    Lforward();

  }
  if ((distanceFR - distanceFL < (-error)) && (distanceFR!= 0) && (distanceFL != 0)){
    Rforward();
}
}

void run(){
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 180);
  analogWrite(ML_PWM, 190);
}

void stop(){
  digitalWrite(MR_1, LOW);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, LOW);
  analogWrite(MR_PWM, 0);
  analogWrite(ML_PWM, 0);
}

void left() {
  digitalWrite(MR_1, LOW);
  digitalWrite(MR_2, HIGH);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 240);
  analogWrite(ML_PWM, 240);
}

void right() {
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, HIGH);
  digitalWrite(ML_2, LOW);
  analogWrite(MR_PWM, 240);
  analogWrite(ML_PWM, 240);
}

void circleLeft() {
  timer = millis();
  while (millis() - timer < 100){
    left();
  }
  timer = millis();
  while (millis() - timer < 400){
    stop();
  }
}

void circleRight() {
  timer = millis();
  while (millis() - timer < 100){
    right();
  }
  timer = millis();
  while (millis() - timer < 400){
    stop();
  }
}


void Sforward() {
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 160);
  analogWrite(ML_PWM, 160);
}

void Lforward() {
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 170);
  analogWrite(ML_PWM, 0);
}

void Rforward() {
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 0);
  analogWrite(ML_PWM, 170);
}

void circleBackRight() {
  timer = millis();
  while (millis() - timer < 100){
    backupRight();
  }
  timer = millis();
  while (millis() - timer < 400){
    stop();
  }
}

void circleBackLeft() {
  timer = millis();
  while (millis() - timer < 100){
    backupLeft();
  }
  timer = millis();
  while (millis() - timer < 400){
    stop();
  }
}

void Back_inc() {
  timer = millis();
  while (millis() - timer < 100){
    backup();
  }
  timer = millis();
  while (millis() - timer < 400){
    stop();
  }
}

void backupRight() {
  digitalWrite(MR_1, LOW);
  digitalWrite(MR_2, HIGH);
  digitalWrite(ML_1, HIGH);
  digitalWrite(ML_2, LOW);
  analogWrite(MR_PWM, 255);
  analogWrite(ML_PWM, 150);
}

void backupLeft() {
  digitalWrite(MR_1, LOW);
  digitalWrite(MR_2, HIGH);
  digitalWrite(ML_1, HIGH);
  digitalWrite(ML_2, LOW);
  analogWrite(MR_PWM, 0);
  analogWrite(ML_PWM, 255);
}

void backup() {
  digitalWrite(MR_1, HIGH);
  digitalWrite(MR_2, LOW);
  digitalWrite(ML_1, LOW);
  digitalWrite(ML_2, HIGH);
  analogWrite(MR_PWM, 250);
  analogWrite(ML_PWM, 250);
}


void loop() {

  switch (state) {
    case ORIENTING_A: 
      circleLeft();
      if ((distanceB < 25) && (distanceR < 25) && (distanceFR < 75) && (abs(distanceFR - distanceFL) <= 2)) {
        state = FORWARD1;
      }
      break;
    case FORWARD1:
      forward();
      if (distanceFR < 33 && distanceFR != 0) {
        state = LEFT1;
      }
      break;
    case LEFT1:
      
      circleLeft();
      if ((distanceB < 25) && (distanceR < 25) && (distanceFR > 80) && (abs(distanceFR - distanceFL) <= 20)) {
        state = FORWARD2;
      }
      break;

    case FORWARD2:
      forward();
      if (distanceFL < 60 && distanceFL != 0)  {
        state = EXITING1;
      }
      break;

  case EXITING1:
    circleRight();
    if ((abs(distanceFR - distanceFL) <= 8) && (distanceFR > 120)) {
      state = ENTERING2;
    }
    break;
  
  case ENTERING2:
    timer = millis();
    while (millis() - timer < 1100) {
      run();
      }

    while (analogRead(IR) > 800) {
      run();
      
    }
    state = LEFT2;
    
    break;

  case LEFT2:
    circleLeft();
    if ((abs(distanceFR - distanceFL) <= 4) && (distanceFR < 70)) {
      state = FORWARD_HIT;
    }
    break;
  
  case FORWARD_HIT:
    forward();
    if (distanceFR < 6) {
      state = BACKUP;
      }
    
    break;

  case BACKUP:
    circleBackRight();
    if ((abs(distanceFR - distanceFL) <= 13) && (distanceL < 20) && (distanceL != 0) && distanceFR > 20 && distanceFL > 20 ) {
      state = FORWARD_HIT2;
    }
    break;


  case FORWARD_HIT2:
    forward();
    if (distanceFR < 13) {
      state = BACKUP2;
      }
    
    break;

  case BACKUP2:
    timer2 = millis();
    while (millis() - timer2 < 6000) {
      circleBackLeft();
      }
    state = FORWARD_HIT3;
    break;

  case FORWARD_HIT3:
    timer2 = millis();
    while (millis() - timer2 < 3000) {
      run();

    } 
    digitalWrite(SLIDE, HIGH);


    state = CELEB;
    break;
  
  case CELEB:
    stop();
    timer = millis();
    while (millis() - timer < 4000){
      digitalWrite(SLIDE, HIGH);
    }
    timer = millis();
    while (millis() - timer < 4000){
      digitalWrite(SLIDE, LOW);
    }
    state = STOP;
      
      break;    
  case STOP:
    stop();
    break;
  }
}

          



          
